everything in javascript happens inside a global execution context   

Javascript is a synchronous and single threaded language.It means JS can execute only one command at a time

execution context is divided into two parts/phases:-
1)memory component/variable environment-> In this phase javascript engine go scan the code and only declare(allocate memory) variables with value=undefined and function with value=whole function.Data/Functions are stored in key value pairs.
2)thread of execution-> In this whole code is executed line by line and variables are intialised value ,functions are called,etc.

Function Invocation:-
Whenever a new function in executed then brand new execution context is created and we again go through the two phases of execution context.
In variable environment parameters and variables will declared with value equal to undefined and then next in thread of execution first of all parameters declared are intialised with value passed to function as argument and then similarly all other variables are initialised value if given and execute function in it.

Call Stack:-
In order handle creation,managment,deletion of execution context.
Global execution context is always at the bottom of stack and other context are pushed into the stack and when they are executed they are popped off


---------------------------------------------------------------------------------------------------------------------------------------------------------------


Hosting and Call stack Demo -> https://youtu.be/Fnlnw8uY6jo
When we try to access and log variables and functions before even declaring them it does not throw error rather it logs undefined in the console.
Now this happens because in variable environment phase all variables are declared with undefined and functions are declared with whole function.
Now if we try to access a function created through arrow function and variable then it throws as it is treated as variable and undefined is stored in it and hence it throws that given variable is not a function.
for eg:-
 var getname=()=>{
     console.log("hello world!");
}
Hoisting is a behavior in JavaScript where variables and function declarations are automatically moved to the top of their scope. In other words, regardless of where a variable or function is declared in the code, it is treated as if it was declared at the top of the code block.

Whenever javascript program is executed even with empty js file it js engine creates window object(with some methods and properties) and this keyword.So when you create a variable or function it is added to this window object.
suppose you create a variable x and try to log it on console then you have to do like console.log(window.x) but if you do console.log(x) it will still log x to console cause if you does not provide any object(window object) then it will assume u are pointing to window object

difference between undefined and not defined:-
an variable is undefined if it was allocated placeholder or memory in variable environment and in code it was tried to access its value which is not yet intialised.
an variable is not defined if it was not allocated placeholder or memory during variable environment and hence engine cannot find the the variable in the global space


---------------------------------------------------------------------------------------------------------------------------------------------------------------


lexical environment is created Whenever an execution context is created(variable environment) and lexical environment is local memory + reference to lexical environment of parent

Hoisting is also done in let and const variable but we cannot access them before they are intialised.
We can see in the scope(in browser using debugger)...variable declared through var are present in global space but let and const are present something know as script(they are stored in separate memory space).
let and const variables are not attached to global object(window )
Temporal dead zone is the time between since when variable was hoisted till it was intialised

Reference Error:-JS Engine tried to find a variable but was unable to find it.
This error is thrown in the context of let and const variables.
Syntax Error:-This is error is shown if the syntax is wrong for eg:- redeclaring same variable twice but when you declare same variable using var no error is thrown
Type Error:-It is a error thrown for particular type(data type) for eg:- you try to re-intialise the variable intialised with const


---------------------------------------------------------------------------------------------------------------------------------------------------------------


Block:-lines of code within a curly braces represent a Block.They are used to represent a multiple lines of code as single line where js engine expects a single statement.Block is used to group the the multiple js statements.
for eg:- a if statement expects single statement after the condition
that is following code is absolute fine
if(true)console.log('single line') 
but we want to do more than one things so we use blocks
if(true){
    console.log('first line');
    console.log('second line');
} 

Block Scope:- what all variable and functions that can be accessed within the block.
Let & const are block scoped while var is not block scoped that is you cannot access let & const variable created in block outside of the block while you can access var variable outside of the block.
for eg:-
{
  let a=1;
  const b=2;
  var c=3;
  console.log(a);//print 1
  console.log(b);//print 2
  console.log(c);//print 3
 }
  console.log(a);//print1
  console.log(b);//throws error
  console.log(c);
 
Now this happens because if you see in the scope using debugger var variable are attached to global scope while for let & const variable a new scope Block is created.

Shadowing:-If we have same named variable outside a particular block then variable inside the block shadows the variable outside the block
for eg:-
let b=1;
{
    let b=2;
    console.log(b)//prints 2 to the console
}
console.log(b)//prints 1 to the console

---------------------------------------------------------------------------------------------------------------------------------------------------------------


closure:-function along with its lexical scope forms a closure
Closure :Function bundled with its lexical environment is known as a closure. Whenever function is returned, even if its vanished in execution context but still it remembers the reference it was pointing to
WHEN FUNCTIONS ARE RETURNED THEY STILL MAINTAIN THERE LEXICAL SCOPE,THEY REMEMBER WERE THEY WERE PRESENT


so in closure does the variable present in lexical environment of function are stored in separate memory space so when the function is called it refers it from this memory space?
Yes, that's correct. When a function is defined, it creates a closure which stores references to all the variables in the function's lexical environment. This closure has its own memory space, separate from the global memory space, where it stores these variables.

When the function is executed, any references to variables in its lexical environment are resolved by looking them up in the closure's memory space, rather than the global memory space. This means that even if the variables in the lexical environment are no longer in scope or have been reassigned, the closure still has a reference to their original values.

so the function that forms the closure updates the variable in closure and hence we get updated value
Yes, that's correct. When a function is created inside another function, it has access to the variables of the outer function. The inner function forms a closure that contains a reference to the variables in the outer function's scope. When the inner function is called, it has access to the variables in the closure, and can read and update their values. Any changes made to the variables inside the closure will persist even after the outer function has returned. This is why closures are often used for creating private variables in JavaScript

so when a closure is formed variable created in lexical environment are not destoyed and stored in closures right?

Yes, that's correct. When a closure is formed, the variables created in the lexical environment are not destroyed and are stored in the closure. The closure keeps a reference to the variables in the lexical environment, which allows them to be accessed and updated by the function even after the lexical environment is no longer in scope. This is why closures are useful for creating private variables and maintaining state in JavaScript functions.

---------------------------------------------------------------------------------------------------------------------------------------------------------------

Event Loop has only one job that is continously monitor call stack and callback queue and microtask queue
callback functions from promises and mutation observer come in microtask queue

Whenever a js code is executed a global execution context is created and pushed into call stack and whenever a new function is encountered new execution context of that function is created and pushed into call stack and the code is executed 

Now if we have settimeout then callback function to settimeout is registered and after the time expires it is pushed into call back queue and now the event loop always keep track of callback queue and if there was something in queue it will push it Into callstackÂ  and hence callback function executed after time expires 

The only job of event loop is to monitor callstack and callback queue and if callstack is empty and there is something in callback queue then push it into callstack 

Microtask queue has priority than callback queue which means functions in the Microtask queue are executed first
Callback function from promises and mutations server are pushed into microtask queue

---------------------------------------------------------------------------------------------------------------------------------------------------------------

Scope means where you can access the a specific variable in our code.
There are two ways of seeing a scope:-
1)What is scope of variable?
It means where you can access the given variable.
2)is a variable in a scope?

lexical environment of scope/function is combination of its local memory space and reference to parent's lexical environment.
A lexical environment is created when a function is defined or when a block of code is executed. It includes the variables and functions defined within that environment, as well as any variables and functions that are accessible from the parent environment.
lexical environment of global scope is comibination of current global memory space and reference to null.

A scope chain is a list of nested scopes (environment records) that are searched for the value of a variable or function. The chain starts from the innermost scope, which is the local scope, and goes outward to the global scope.

When a variable is accessed, the JavaScript interpreter searches for it in the current scope. If it's not found, it continues searching in the parent scope, and so on, until it reaches the global scope. The scope chain is created when a function is defined, and it determines the visibility of variables and functions within that function. The scope chain is used to resolve variable and function references, and it allows nested functions to access variables and functions in their parent scopes.

---------------------------------------------------------------------------------------------------------------------------------------------------------------

Function statements and function expressions are both ways to define functions in JavaScript.

A function statement is a way to define a function using the function keyword followed by the function name and the function body. For example:

function sayHello() {
console.log("Hello!");
}
A function expression is a way to define a function using the function keyword without a function name. Instead, the function is assigned to a variable or passed as an argument to another function. For example:

const sayHello = function() {
console.log("Hello!");
}
First-class functions, on the other hand, refer to the ability of functions to be treated as values and passed around like any other data type in JavaScript. This means that functions can be assigned to variables, passed as arguments to other functions, and returned from functions. For example:

const add = function(a, b) {
return a + b;
}

const subtract = function(a, b) {
return a - b;
}

function calculate(operation, a, b) {
return operation(a, b);
}

console.log(calculate(add, 2, 3)); // Output: 5
console.log(calculate(subtract, 5, 3)); // Output: 2
In the above example, add and subtract are both first-class functions that can be passed as arguments to the calculate function, which also demonstrates the use of function expressions.

---------------------------------------------------------------------------------------------------------------------------------------------------------------





##Updating objects immutably in react
Even though you updated the object A with the statement A={...A,work:'student'}, you are not actually modifying the original A object. Instead, you are creating a new object that is a copy of the original object A with the additional property work set to 'student'.
This new object is a different object in memory, and the original object A is left untouched. This is the essence of immutability: you create a new object each time you update a state, rather than modifying the existing one. This helps avoid unintentional side effects that could arise if you modify an object directly.
 the original object A is not removed from memory. When you do A = { ...A, work: 'student' }, a new object is created with the properties of the old A object along with a new property work having the value 'student'. The new object is then assigned to the variable A. The old object A still exists in memory until it is no longer referenced anywhere in the code and the garbage collector removes it.
The important thing to note here is that the old object A has not been mutated. Instead, a new object has been created with the updated properties. This is what is meant by "updating objects immutably".



---------------------------------------------------------------------------------------------------------------------------------------------------------------





here is an example of using fetch with .then and await:

Using .then:
fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error(error));
  
Using await:
async function getData() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/posts/1');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error(error);
  }
}

getData();
Explanation:

In the first example using .then, we first call fetch() with the URL of the API we want to retrieve data from. The fetch() function returns a Promise which resolves to a Response object. We then chain a .then() method on this Promise which takes the Response object as an argument and returns another Promise. This second Promise is resolved to the JSON data by calling the .json() method on the Response object. Finally, we chain another .then() method on this second Promise which takes the JSON data as an argument and logs it to the console. We also catch any errors that occur with a .catch() method.
internally fetch uses a Promise with a .then() function to handle the response from the server. When the server's response is received, the Promise is resolved and the response is passed as an argument to the .then() function. The .then() function can then access the response and handle it accordingly.

In the second example using await, we define an async function called getData() which uses the await keyword to wait for the fetch() function to return a Response object. We then use await again to wait for the .json() method to return the JSON data. Finally, we log the JSON data to the console. We also use a try-catch block to catch any errors that occur.

Both methods achieve the same result, but the second example using await can be easier to read and write, especially when dealing with multiple API calls and asynchronous operations.
---------------------------------------------------------------------------------------------------------------------------------------------------------------


##async and await in javascript
In JavaScript, await is used to wait for a promise to resolve before continuing execution of the current function. When a function contains the await keyword before a promise, the function will pause until the promise is resolved, and then continue execution.

Here's an example:
async function getData() {
  const response = await fetch('/data'); // Wait for the response from the server
  const data = await response.json(); // Wait for the data to be parsed as JSON
  return data;
}

getData().then((data) => {
  console.log(data);
});
In this example, the getData() function is an asynchronous function that uses await to wait for the response from the server and then parse the data as JSON. Once the data is available, the function returns the data. The then() method is then used to log the data to the console.

Note that await can only be used inside an async function. Also, if the promise that await is waiting for is rejected, the async function will throw an error that can be caught using a try/catch block.

You can execute a function that processes the data returned by the fetch promise by chaining the .then() method onto the end of the fetch call.

Here's an example:
fetch('https://api.example.com/data')
  .then(response => response.json())
  .then(data => {
    // Do something with the data
    console.log(data);
  })
  .catch(error => {
    // Handle any errors
    console.error(error);
  });
In this example, the fetch call returns a promise that resolves with a Response object. We chain the .then() method onto the end of the fetch call to extract the JSON data from the response using the json() method. The resulting promise resolves with the parsed data, which we then pass to a function that does something with it. If there is an error, we catch it with the .catch() method.

Using await, the code would look like this:
async function getData() {
  const response = await fetch('https://api.example.com/data');
  const data = await response.json();
  // Do something with the data
  console.log(data);
}

getData().catch(error => {
  // Handle any errors
  console.error(error);
});
In this example, the getData() function is declared as async, which allows us to use await to wait for the response and the data. Once the data is available, we log it to the console. If there is an error, we catch it with a try/catch block.

When you use await with a Promise, it suspends the execution of the current function until the Promise resolves, and then it returns the resolved value.

In the case of fetch, it returns a Promise that resolves with a Response object. To access the response data, you need to call the json() method on the Response object, which also returns a Promise. When you use await with the json() Promise, it suspends the execution of the function until the Promise resolves with the parsed data, and then it returns the data.


---------------------------------------------------------------------------------------------------------------------------------------------------------------


##prototypal inheritance
Prototypal inheritance is a way that objects in JavaScript can inherit properties and methods from a parent object, known as the prototype. In this model, each object has a prototype object that it inherits properties and methods from, and can in turn be used as the prototype for other objects.

When a property or method is accessed on an object, if the object itself doesn't have that property or method, JavaScript will look for it on the object's prototype. If it's not found there, the prototype's prototype is searched, and so on, all the way up to the root prototype object.

 When you create an object with a prototype, the prototype object is created only once and all the created objects refer to the same prototype object. This helps to save memory as multiple objects can share the same prototype instead of each having its own copy of the same properties and methods.

For example, in JavaScript, the Object constructor function is used to create objects. When you create an object using the new Object() syntax, the object will have a prototype object. The prototype object for the Object constructor is stored in Object.prototype.

So, if you create five objects using new Object() syntax and set their prototype to Object.prototype, then all five objects will share the same prototype object, which is Object.prototype. This helps to save memory as only one copy of Object.prototype is created and all five objects refer to the same prototype object.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

##Comparison in javascript


In JavaScript, the == operator is used for comparison between two values. When using the == operator, JavaScript performs type coercion to convert the operands to a common type before making the comparison.

Type coercion is the process of converting a value from one data type to another. JavaScript has a set of rules for type coercion when comparing values with the == operator. Here's how it works:

If the operands have the same type, JavaScript performs a strict equality comparison (===) and returns true if they have the same value and type.

If the operands have different types, JavaScript attempts to convert them to a common type before making the comparison. The rules for type coercion are as follows:

a. If one operand is a string and the other operand is a number, JavaScript converts the string to a number and then performs a numeric comparison.

b. If one operand is a boolean and the other operand is not a boolean, JavaScript converts the boolean to a number (true becomes 1, false becomes 0) and then performs a numeric comparison.

c. If one operand is an object and the other operand is a primitive type, JavaScript attempts to convert the object to a primitive value using the valueOf() or toString() methods of the object.

d. If both operands are objects, JavaScript performs a reference comparison and returns true only if the operands refer to the same object.

e. If both operands are null or undefined, JavaScript considers them equal and returns true.

f. If one operand is NaN (Not-a-Number) and the other operand is not a number, the comparison returns false.

g. For all other cases, JavaScript considers the operands unequal and returns false.

It's important to note that the == operator can sometimes lead to unexpected or counterintuitive results due to the complex rules of type coercion. To avoid this, it's generally recommended to use the strict equality operator (===), which compares both value and type without performing any type coercion.
