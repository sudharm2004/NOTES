everything in javascript happens inside an execution context   

execution context is divided into two parts:-
1)memory component/variable environment-> In this phase javascript engine go scan the code and only declare(allocate memory) variables with value=undefined and function with value=whole function
2)thread of execution-> In this whole code is executed line by line and variables are intialised value ,functions are called,etc.

Hosting and Call stack Demo -> https://youtu.be/Fnlnw8uY6jo

Whenever javascript program is executed even with empty js file it js engine creates window object(with some methods and properties) and this keyword.So when you create a variable or function it is added to this window object.
suppose you create a variable x and try to log it on console then you have to do like console.log(window.x) but if you do console.log(x) it will still log x to console cause if you does not provide any object(window object) then it will assume u are pointing to window object

difference between undefined and not defined:-
an variable is undefined if it was allocated placeholder or memory in variable environment and in code it was tried to access its value which is not yet intialised.
an variable is not defined if it was not allocated placeholder or memory during variable environment and hence engine cannot find the the variable in the global space

lexical environment is created Whenever an execution context is created(variable environment) and lexical environment is local memory + reference to lexical environment of parent

Hoisting is also done in let and const variable but we cannot access them before they are intialised
Temporal dead zone is the time between since when variable was hoisted till it was intialised

Reference Error:-JS Engine tried to find a variable but was unable to find it
Syntax Error:-This is error is show if the syntax is wrong for eg:- redeclaring same variabel twice
Type Error:-It is a error thrown for particular type(data type) for eg:- you try to re-intialise the variable intialised with const

Block:-lines of code within a curly braces represent a Block.They are used to represent a multiple lines of code as single line where js engine expects a single statement
for eg:- a if statement expects single statement after the condition
that is following code is absolute fine
if(true)console.log('single line') 
but we want to do more than one things so we use blocks
if(true){
    console.log('first line');
    console.log('second line');
} 

Block Scope:- what all variable and functions that can be accessed within the block

Shadowing:-If we have same named variable outside a particular block then variable inside the block shadows the variable outside the block
for eg:-
let b=1;
{
    let b=2;
    console.log(b)//prints 2 to the console
}
console.log(b)//prints 1 to the console

closure:-function along with its lexical scope forms a closure
Closure :Function bundled with its lexical environment is known as a closure. Whenever function is returned, even if its vanished in execution context but still it remembers the reference it was pointing to
WHEN FUNCTIONS ARE RETURNED THEY STILL MAINTAIN THERE LEXICAL SCOPE,THEY REMEMBER WERE THEY WERE PRESENT

Event Loop has only one job that is continously monitor call stack and callback queue and microtask queue
callback functions from promises and mutation observer come in microtask queue
